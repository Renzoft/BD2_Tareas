-- ========================================
-- CREACIÓN DE TABLAS BASE
-- ========================================

CREATE TABLE region (
  region_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

CREATE TABLE puesto (
  puesto_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL,
  salario NUMBER(10,2)
);

CREATE TABLE employee (
  employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL,
  apellido VARCHAR2(50) NOT NULL,
  fecha_ingreso DATE DEFAULT SYSDATE,
  puesto_id NUMBER,
  region_id NUMBER,
  salario NUMBER(10,2),
  CONSTRAINT fk_employee_puesto FOREIGN KEY (puesto_id) REFERENCES puesto(puesto_id),
  CONSTRAINT fk_employee_region FOREIGN KEY (region_id) REFERENCES region(region_id)
);

CREATE TABLE historial_puestos (
  historial_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id NUMBER NOT NULL,
  puesto_id NUMBER NOT NULL,
  fecha_cambio DATE DEFAULT SYSDATE,
  CONSTRAINT fk_historial_employee FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
  CONSTRAINT fk_historial_puesto FOREIGN KEY (puesto_id) REFERENCES puesto(puesto_id)
);

-- ========================================
-- INSERTANDO DATOS DE PRUEBA
-- ========================================
INSERT INTO region (nombre) VALUES ('Lima');
INSERT INTO region (nombre) VALUES ('Cusco');
INSERT INTO region (nombre) VALUES ('Arequipa');

INSERT INTO puesto (nombre, salario) VALUES ('Analista', 3500);
INSERT INTO puesto (nombre, salario) VALUES ('Programador', 4200);
INSERT INTO puesto (nombre, salario) VALUES ('Jefe de Proyecto', 6000);
INSERT INTO puesto (nombre, salario) VALUES ('Gerente', 8500);

INSERT INTO employee (nombre, apellido, fecha_ingreso, puesto_id, region_id, salario)
VALUES ('Renzo', 'Munayco', DATE '2020-02-15', 2, 1, 4200);
INSERT INTO employee (nombre, apellido, fecha_ingreso, puesto_id, region_id, salario)
VALUES ('María', 'Vargas', DATE '2018-10-03', 3, 2, 6000);
INSERT INTO employee (nombre, apellido, fecha_ingreso, puesto_id, region_id, salario)
VALUES ('Carlos', 'Rojas', DATE '2016-05-20', 1, 3, 3500);
INSERT INTO employee (nombre, apellido, fecha_ingreso, puesto_id, region_id, salario)
VALUES ('Lucía', 'Paredes', DATE '2017-01-10', 4, 1, 8500);

INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (1, 1, DATE '2020-05-01');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (1, 2, DATE '2021-01-10');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (1, 3, DATE '2023-04-22');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (2, 3, DATE '2019-07-15');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (2, 4, DATE '2022-02-18');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (3, 1, DATE '2016-05-20');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (3, 2, DATE '2018-12-01');
INSERT INTO historial_puestos (employee_id, puesto_id, fecha_cambio) VALUES (4, 4, DATE '2017-01-10');
COMMIT;

-- ========================================
-- TABLAS DE HORARIOS Y ASISTENCIAS
-- ========================================
CREATE TABLE horario (
  dia_semana VARCHAR2(15),
  turno VARCHAR2(20),
  hora_inicio DATE,
  hora_fin DATE
);

CREATE TABLE empleado_horario (
  dia_semana VARCHAR2(15),
  turno VARCHAR2(20),
  employee_id NUMBER,
  CONSTRAINT fk_emp_horario FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

CREATE TABLE asistencia_empleado (
  employee_id NUMBER,
  dia_semana VARCHAR2(15),
  fecha_real DATE,
  hora_inicio_real DATE,
  hora_fin_real DATE,
  CONSTRAINT fk_asistencia_emp FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

-- ========================================
-- DATOS DE EJEMPLO
-- ========================================
INSERT INTO horario VALUES ('Lunes', 'Mañana', TO_DATE('08:00', 'HH24:MI'), TO_DATE('16:00', 'HH24:MI'));
INSERT INTO horario VALUES ('Martes', 'Mañana', TO_DATE('08:00', 'HH24:MI'), TO_DATE('16:00', 'HH24:MI'));
INSERT INTO horario VALUES ('Miércoles', 'Mañana', TO_DATE('08:00', 'HH24:MI'), TO_DATE('16:00', 'HH24:MI'));
INSERT INTO horario VALUES ('Jueves', 'Mañana', TO_DATE('08:00', 'HH24:MI'), TO_DATE('16:00', 'HH24:MI'));
INSERT INTO horario VALUES ('Viernes', 'Mañana', TO_DATE('08:00', 'HH24:MI'), TO_DATE('16:00', 'HH24:MI'));

INSERT INTO empleado_horario VALUES ('Lunes', 'Mañana', 1);
INSERT INTO empleado_horario VALUES ('Martes', 'Mañana', 1);
INSERT INTO empleado_horario VALUES ('Miércoles', 'Mañana', 1);
INSERT INTO empleado_horario VALUES ('Jueves', 'Mañana', 2);
INSERT INTO empleado_horario VALUES ('Viernes', 'Mañana', 2);

INSERT INTO asistencia_empleado VALUES (1, 'Lunes', TO_DATE('2024-10-07', 'YYYY-MM-DD'), TO_DATE('08:05', 'HH24:MI'), TO_DATE('16:02', 'HH24:MI'));
INSERT INTO asistencia_empleado VALUES (1, 'Martes', TO_DATE('2024-10-08', 'YYYY-MM-DD'), TO_DATE('08:03', 'HH24:MI'), TO_DATE('16:01', 'HH24:MI'));
INSERT INTO asistencia_empleado VALUES (2, 'Jueves', TO_DATE('2024-10-10', 'YYYY-MM-DD'), TO_DATE('08:10', 'HH24:MI'), TO_DATE('16:15', 'HH24:MI'));
COMMIT;

-- ========================================
-- PAQUETE COMPLETO CON 3.1.1 A 3.1.5
-- ========================================
CREATE OR REPLACE PACKAGE employee_pkg AS
  PROCEDURE top_empleados_rotacion;
  FUNCTION promedio_contrataciones RETURN NUMBER;
  PROCEDURE estadistica_regional;
  FUNCTION tiempo_servicio RETURN NUMBER;
  FUNCTION horas_trabajadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
END employee_pkg;
/

CREATE OR REPLACE PACKAGE BODY employee_pkg AS

  -- 3.1.1
  PROCEDURE top_empleados_rotacion IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('CÓDIGO | APELLIDO | NOMBRE | PUESTO ACTUAL | ROTACIONES');
    FOR r IN (
      SELECT e.employee_id, e.apellido, e.nombre, p.nombre AS puesto, COUNT(h.historial_id) AS cambios
      FROM employee e
      JOIN puesto p ON e.puesto_id = p.puesto_id
      JOIN historial_puestos h ON e.employee_id = h.employee_id
      GROUP BY e.employee_id, e.apellido, e.nombre, p.nombre
      ORDER BY cambios DESC FETCH FIRST 4 ROWS ONLY
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(r.employee_id || ' | ' || r.apellido || ' | ' || r.nombre || ' | ' || r.puesto || ' | ' || r.cambios);
    END LOOP;
  END;

  -- 3.1.2
  FUNCTION promedio_contrataciones RETURN NUMBER IS
    v_total NUMBER := 0;
  BEGIN
    FOR r IN (
      SELECT TO_CHAR(fecha_ingreso, 'Month', 'NLS_DATE_LANGUAGE=SPANISH') AS mes,
             ROUND(COUNT(*) / COUNT(DISTINCT EXTRACT(YEAR FROM fecha_ingreso)), 2) AS promedio
      FROM employee
      GROUP BY TO_CHAR(fecha_ingreso, 'Month', 'NLS_DATE_LANGUAGE=SPANISH'),
               TO_NUMBER(TO_CHAR(fecha_ingreso, 'MM'))
      ORDER BY TO_NUMBER(TO_CHAR(fecha_ingreso, 'MM'))
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(RTRIM(r.mes) || ' | ' || r.promedio);
      v_total := v_total + 1;
    END LOOP;
    RETURN v_total;
  END;

  -- 3.1.3
  PROCEDURE estadistica_regional IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('REGIÓN | TOTAL SALARIOS | EMPLEADOS | MÁS ANTIGUO');
    FOR r IN (
      SELECT reg.nombre AS region,
             SUM(emp.salario) AS total_salario,
             COUNT(emp.employee_id) AS empleados,
             MIN(emp.fecha_ingreso) AS antiguo
      FROM employee emp
      JOIN region reg ON emp.region_id = reg.region_id
      GROUP BY reg.nombre
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(r.region || ' | ' || r.total_salario || ' | ' || r.empleados || ' | ' || TO_CHAR(r.antiguo, 'DD-MON-YYYY'));
    END LOOP;
  END;

  -- 3.1.4
  FUNCTION tiempo_servicio RETURN NUMBER IS
    v_total NUMBER := 0;
    v_meses NUMBER;
  BEGIN
    FOR r IN (
      SELECT employee_id, nombre, apellido, TRUNC(MONTHS_BETWEEN(SYSDATE, fecha_ingreso)/12) AS anios
      FROM employee
    ) LOOP
      v_meses := r.anios;
      DBMS_OUTPUT.PUT_LINE(r.nombre || ' ' || r.apellido || ' | ' || r.anios || ' años | ' || v_meses || ' meses');
      v_total := v_total + v_meses;
    END LOOP;
    RETURN v_total;
  END;

  -- 3.1.5
  FUNCTION horas_trabajadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
    v_total_horas NUMBER := 0;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('FECHA | HORAS TRABAJADAS');
    FOR r IN (
      SELECT fecha_real,
             ROUND((hora_fin_real - hora_inicio_real) * 24, 2) AS horas
      FROM asistencia_empleado
      WHERE employee_id = p_employee_id
        AND EXTRACT(MONTH FROM fecha_real) = p_mes
        AND EXTRACT(YEAR FROM fecha_real) = p_anio
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(TO_CHAR(r.fecha_real, 'DD-MON-YYYY') || ' | ' || r.horas);
      v_total_horas := v_total_horas + r.horas;
    END LOOP;
    RETURN v_total_horas;
  END;

END employee_pkg;
/

SET SERVEROUTPUT ON;
EXEC employee_pkg.top_empleados_rotacion;
VAR v_horas NUMBER;
EXEC :v_horas := employee_pkg.horas_trabajadas(1, 10, 2024);
PRINT v_horas;
